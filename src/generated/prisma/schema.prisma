generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String          @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  inventory   InventoryItem[]

  @@map("categories")
}

model InventoryItem {
  id             String            @id @default(cuid())
  quantity       Int               @default(0)
  minStockLevel  Int               @default(5)
  location       String?
  lastUpdated    DateTime          @updatedAt
  active         Boolean           @default(true)
  categoryId     String?
  cost           Decimal           @default(0) @db.Decimal(10, 2)
  createdAt      DateTime          @default(now())
  description    String?
  imageUrl       String?
  margin         Decimal           @default(0) @db.Decimal(10, 2)
  name           String
  price          Decimal           @db.Decimal(10, 2)
  sku            String            @unique
  updatedAt      DateTime          @updatedAt
  category       Category?         @relation(fields: [categoryId], references: [id])
  transactions   SaleTransaction[]
  stockMovements StockMovement[]

  @@index([categoryId])
  @@map("inventory_items")
}

model StockMovement {
  id              String        @id @default(cuid())
  inventoryItemId String
  quantity        Int
  type            MovementType
  date            DateTime      @default(now())
  notes           String?
  createdBy       String?
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)

  @@index([inventoryItemId])
  @@map("stock_movements")
}

model Sale {
  id           String            @id @default(cuid())
  date         DateTime          @default(now())
  total        Decimal           @db.Decimal(10, 2)
  subtotal     Decimal           @db.Decimal(10, 2)
  tax          Decimal           @db.Decimal(10, 2)
  status       SaleStatus        @default(COMPLETED)
  notes        String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  transactions SaleTransaction[]

  @@map("sales")
}

model SaleTransaction {
  id              String        @id @default(cuid())
  saleId          String
  quantity        Int
  unitPrice       Decimal       @db.Decimal(10, 2)
  subtotal        Decimal       @db.Decimal(10, 2)
  createdAt       DateTime      @default(now())
  inventoryItemId String
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  sale            Sale          @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@index([inventoryItemId])
  @@index([saleId])
  @@map("sale_transactions")
}

enum MovementType {
  STOCK_IN
  STOCK_OUT
  ADJUSTMENT
  INITIAL
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
}
